{"version":3,"sources":["components/Letter.js","components/LetterList.js","components/MonsterListItem.js","components/MonsterList.js","components/MonsterInfoCard.js","components/MainContent.js","App.js","reportWebVitals.js","index.js"],"names":["Letter","text","onClick","toLowerCase","LetterList","letters","className","map","letter","MonsterListItem","index","href","MonsterList","filteredMonList","item","name","MonsterInfoCard","monsterInfo","calculateModifier","skill","modifier","Math","floor","id","alignment","type","challenge_rating","armor_class","strength","dexterity","constitution","intelligence","wisdom","charisma","languages","MainContent","dndAPI","monstersUrl","useState","monsterDetails","setMonsterDetails","monsterIndex","a","fetch","response","json","details","console","log","length","App","monsterData","setMonsterData","filteredMonsters","setFilteredMonsters","useEffect","monstersList","results","getMonsters","monsByLetter","filter","charAt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e092aac.chunk.js","sourcesContent":["function Letter({ text, onClick }) {\r\n  return (\r\n    <li>\r\n      <button onClick={() => onClick(text.toLowerCase())}>{text}</button>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default Letter;\r\n","import Letter from \"./Letter\";\r\n\r\nfunction LetterList({ letters, onClick }) {\r\n  return (\r\n    <ul className=\"letter-list\">\r\n      {letters.map((letter) => (\r\n        <Letter key={letter.toLowerCase()} text={letter} onClick={onClick} />\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default LetterList;\r\n","function MonsterListItem({ text, index, onClick }) {\r\n  return (\r\n    <li onClick={() => onClick(index)}>\r\n      <a href=\"#monsterScrollTo\">{text}</a>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default MonsterListItem;\r\n","import MonsterListItem from \"./MonsterListItem\";\r\n\r\nfunction MonsterList({ filteredMonList, onClick }) {\r\n  return (\r\n    <section>\r\n      <ul className=\"monster-list\">\r\n        {filteredMonList.map((item) => {\r\n          return (\r\n            <MonsterListItem\r\n              key={item.index}\r\n              index={item.index}\r\n              text={item.name}\r\n              onClick={onClick}\r\n            />\r\n          );\r\n        })}\r\n      </ul>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default MonsterList;\r\n","function MonsterInfoCard({ monsterInfo }) {\r\n  /**\r\n   * calculates and returns the modifier for each of the nosnter's skills\r\n   * @param   {Number} skill    A number corresponding to the value of the skill in question, arguments derived from API data.\r\n   * @return  {String} A positive or negative integer (or 0) corresponding to the modifier indicated by the raw skill number, represented as a string in case a plus sign needs to be visually added to the number.\r\n   */\r\n  function calculateModifier(skill) {\r\n    let modifier = Math.floor((skill - 10) / 2);\r\n\r\n    if (modifier > 0) {\r\n      return `+${modifier}`;\r\n    }\r\n    if (modifier <= 0) {\r\n      return `${modifier}`;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div id=\"monsterScrollTo\"></div>\r\n      <section id=\"monster-info\">\r\n        {monsterInfo ? <h2 id=\"monster-name\">{monsterInfo.name}</h2> : \"\"}\r\n        {monsterInfo ? <h4>Alignment: {monsterInfo.alignment}</h4> : \"\"}\r\n        {monsterInfo ? <h4>Type: {monsterInfo.type}</h4> : \"\"}\r\n        {monsterInfo ? (\r\n          <h4>Challenge Rating: {monsterInfo.challenge_rating}</h4>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {monsterInfo ? <h4>Armor Class: {monsterInfo.armor_class}</h4> : \"\"}\r\n        {monsterInfo ? (\r\n          <h4 className=\"skills-heading\">\r\n            <u>Skills</u>\r\n          </h4>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <ul className=\"monster-skills-list\">\r\n          {monsterInfo ? (\r\n            <li>\r\n              Strength: {monsterInfo.strength} (\r\n              {calculateModifier(monsterInfo.strength)})\r\n            </li>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {monsterInfo ? (\r\n            <li>\r\n              Dexterity: {monsterInfo.dexterity} (\r\n              {calculateModifier(monsterInfo.dexterity)})\r\n            </li>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {monsterInfo ? (\r\n            <li>\r\n              Constitution: {monsterInfo.constitution} (\r\n              {calculateModifier(monsterInfo.constitution)})\r\n            </li>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {monsterInfo ? (\r\n            <li>\r\n              Intelligence: {monsterInfo.intelligence} (\r\n              {calculateModifier(monsterInfo.intelligence)})\r\n            </li>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {monsterInfo ? (\r\n            <li>\r\n              Wisdom: {monsterInfo.wisdom} (\r\n              {calculateModifier(monsterInfo.wisdom)})\r\n            </li>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {monsterInfo ? (\r\n            <li>\r\n              Charisma: {monsterInfo.charisma} (\r\n              {calculateModifier(monsterInfo.charisma)})\r\n            </li>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </ul>\r\n        {monsterInfo ? <h4>Languages: {monsterInfo.languages}</h4> : \"\"}\r\n      </section>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MonsterInfoCard;\r\n","import React, { useState } from \"react\";\r\nimport MonsterList from \"./MonsterList\";\r\nimport MonsterInfoCard from \"./MonsterInfoCard\";\r\n\r\nfunction MainContent({ filteredMonList, dndAPI, monstersUrl }) {\r\n  const [monsterDetails, setMonsterDetails] = useState({});\r\n  /**\r\n   * Fetches individual monster data from the D&D 5th Edition API and stores the info as state in monsterDetails\r\n   * @param  {String} monsterIndex A reference to the \"index\" key within any given item in the filteredMonList array\r\n   */\r\n  async function getMonsterDetails(monsterIndex) {\r\n    const response = await fetch(`${dndAPI}${monstersUrl}${monsterIndex}`);\r\n    const details = await response.json();\r\n\r\n    console.log(details);\r\n    setMonsterDetails(details);\r\n  }\r\n\r\n  return (\r\n    <main>\r\n      {filteredMonList.length > 0 ? (\r\n        <MonsterList\r\n          filteredMonList={filteredMonList}\r\n          onClick={getMonsterDetails}\r\n        />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {filteredMonList.length > 0 ? (\r\n        <MonsterInfoCard monsterInfo={monsterDetails} />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default MainContent;\r\n","// TODO Styles, get it lookin' good:\r\n// TODO   - conditional classNames?\r\n// TODO   - Figure out Monster Card Info layout\r\n// TODO   - animations?\r\n// TODO   - add Sass??\r\n\r\n// TODO Add more information to the monsters' info card\r\n// TODO Add Search bar + more filter options\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport LetterList from \"./components/LetterList\";\r\n// import FilterForm from \"./components/FilterForm\";\r\nimport MainContent from \"./components/MainContent\";\r\n\r\nfunction App() {\r\n  const [monsterData, setMonsterData] = useState(\"\");\r\n  const [filteredMonsters, setFilteredMonsters] = useState([]);\r\n  const alphabet = [\r\n    \"A\",\r\n    \"B\",\r\n    \"C\",\r\n    \"D\",\r\n    \"E\",\r\n    \"F\",\r\n    \"G\",\r\n    \"H\",\r\n    \"I\",\r\n    \"J\",\r\n    \"K\",\r\n    \"L\",\r\n    \"M\",\r\n    \"N\",\r\n    \"O\",\r\n    \"P\",\r\n    \"Q\",\r\n    \"R\",\r\n    \"S\",\r\n    \"T\",\r\n    \"U\",\r\n    \"V\",\r\n    \"W\",\r\n    \"X\",\r\n    \"Y\",\r\n    \"Z\",\r\n  ];\r\n  const dndAPI = \"https://www.dnd5eapi.co\";\r\n  const monstersUrl = \"/api/monsters/\";\r\n\r\n  useEffect(() => {\r\n    /**\r\n     * Fetches a list of monsters from the D&D 5th Edition API and stores the info in state as monsterData\r\n     */\r\n    async function getMonsters() {\r\n      const response = await fetch(`${dndAPI}${monstersUrl}`);\r\n      let monstersList = await response.json();\r\n\r\n      setMonsterData(monstersList.results);\r\n    }\r\n\r\n    getMonsters();\r\n  }, []);\r\n\r\n  /**\r\n   * Filters out and returns an array of monsters that start with the letter the user clicks on in LetterList\r\n   *\r\n   * @param  {String} letter The letter that the names of the monsters in the new array will start with\r\n   * @return  {Array} An array containing the filtered monsters\r\n   */\r\n  function filterByLetter(letter) {\r\n    let monsByLetter = monsterData.filter(\r\n      (item) => item.index.charAt(0) === letter\r\n    );\r\n\r\n    setFilteredMonsters(monsByLetter);\r\n    return filteredMonsters;\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>\r\n        5th Edition Dungeons & Dragons <br /> Monster Guide\r\n      </h1>\r\n      <LetterList\r\n        letters={alphabet}\r\n        monsterData={monsterData}\r\n        onClick={filterByLetter}\r\n      />\r\n\r\n      {/* <FilterForm /> */}\r\n      <MainContent\r\n        filteredMonList={filteredMonsters}\r\n        dndAPI={dndAPI}\r\n        monstersUrl={monstersUrl}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}